{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In incidence geometry, a **plane** $\\pi=(S,\\mathscr L)$ consists of a set of points $S$, a collection $\\mathscr L$ of subsets of $S$. Two lines $\\ell$ and $m$ in $\\mathscr L$ are **parallel**, denoted $\\ell\\parallel m$, if $\\ell=m$ or $\\ell\\cap m=\\emptyset$. The **parallel class** $[\\ell]$ of a line $\\ell$ is the set of lines which are parallel to $\\ell$:\n",
    "$$[l]=\\{m\\in\\mathscr L:m\\parallel l\\}$$\n",
    "Three points $P$, $Q$, and $R$ are **non-collinear** if no line contains all three points."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An **affine plane** is a plane $\\pi=(S,\\mathscr L)$ which satisfies three axioms:\n",
    "\n",
    "A1. For every distinct pair of points $A$ and $B$ in $S$, there exists exactly one line denoted $AB$ passing through the points $A$ and $B$.\n",
    "    \n",
    "A2. For every line $\\ell\\in\\mathscr L$ and every point $A\\in S$ such that $P$ does not lie on $\\ell$, there exists exactly one line $m\\in\\mathscr L$ containing $A$ which is parallel to $\\ell\\parallel m$.\n",
    "    \n",
    "A3. There exist three noncollinear points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from itertools import product"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The smallest affine plane has 4 points and 6 lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axis('off')\n",
    "plt.scatter([0,0,1,1],[0,1,0,1])\n",
    "plt.plot([0,1],[0,0])\n",
    "plt.plot([0,1],[0,1])\n",
    "plt.plot([0,0],[0,1])\n",
    "plt.plot([0,1],[1,1])\n",
    "plt.plot([0,1],[1,0])\n",
    "plt.plot([1,1],[0,1])\n",
    "plt.axis('scaled')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The incidence matrix corresponding to the 4-point affine plane is:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\left[\\begin{array}{cccccc}1&1&1&0&0&0\\\\1&0&0&1&1&0\\\\0&1&0&1&0&1\\\\0&0&1&0&1&1\\end{array}\\right]$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a naive algorithm to determine whether an arbitrary plane $(S,\\mathscr L)$ is an affine plane:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isAffineMatrix(I):\n",
    "    S = I\n",
    "    L = np.transpose(I)\n",
    "    if np.sum(S) == 0 or len(np.unique(S, axis=0)) < len(S) or len(np.unique(L, axis=0)) < len(L):\n",
    "        return False\n",
    "    for a in L:\n",
    "        for b in L:\n",
    "            if any(a != b) and sum(a & b) > 1:\n",
    "                return False\n",
    "            for c in L:\n",
    "                if sum(a & (b & c)) == sum(a & b) == sum(a & c) == 0 and sum(b & c) == 1:\n",
    "                    return False\n",
    "    for P in S:\n",
    "        for Q in S:\n",
    "            for R in S:\n",
    "                if any(P != Q) and any(P != R) and any(Q != R) and sum(P & Q & R) == 0:\n",
    "                    return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "I = np.array([[1,1,1,0,0,0],[1,0,0,1,1,0],[0,1,0,1,0,1],[0,0,1,0,1,1]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isAffineMatrix(I)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try to randomly generate the affine plane of order 2. The incidence matrix is $4\\times 6$, so we only have to check $2^{24}$ incidence matrices. However, we need a new $\\text{isAffinePlane}$ function to check incidence matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isAffinePlaneOrder(n):\n",
    "    for x in product([0,1],repeat=n**3*(n+1)):\n",
    "        I = np.array(x).reshape(n**2, n*(n+1))\n",
    "        if isAffineMatrix(I):\n",
    "            return I\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = isAffinePlaneOrder(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 1, 1, 1],\n",
       "       [0, 1, 1, 0, 0, 1],\n",
       "       [1, 0, 1, 0, 1, 0],\n",
       "       [1, 1, 0, 1, 0, 0]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! The algorithm successfully found an affine plane of order 2. Given a specific indicidence matrix $I$, the time to check whether $I$ corresponds to an affine plane is $O(n^8)$. To perform this check for all incidence matrices we check $2^{n^3(n+1)}$. Thus the time to check whether an affine plane of order $n$ exists is $O(n^82^{n^4})$ (proof?) For order 12, we perform approximately $10^{54000}$ operations. This is not good. However, hopefully we can use Theorem 2 and plane isomorphism to reduce this number. For now we would like to use computational methods to disprove the existence of orders $n=6$ and $n=10$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, most pairs $(S,\\mathscr L)$ are not affine planes. The following theorems provide major restrictions on which pairs can be affine planes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem 1.** Let $\\pi$ be an affine plane. Then there is a bijection between each pair of lines of $\\pi$.\n",
    "\n",
    "**Definition:** An **affine plane of order $n$** is an affine plane in which all lines contain $n$ points."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For an affine plane of order $n$ with $n^2$ points and $n(n+1)$ lines we define the **incidence matrix** to be a $n^2\\times n(n+1)$ matrix where the entry at $(i,j)$ is $1$ if the $i^\\text{th}$ point lies on the $j^\\text{th}$ line and $0$ otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem 2.** Let $\\pi$ be an affine plane of order $n$. Then:\n",
    "\n",
    "1. $\\pi$ contains $n^2$ points\n",
    "\n",
    "2. Each points lies on $n+1$ lines\n",
    "\n",
    "3. There are $n$ parallel classes\n",
    "\n",
    "4. Each parallel class contains $n$ lines \n",
    "\n",
    "5. There are $n(n+1)$ lines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem 3.** There exists an affine plane of order $p$ for every prime $p$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Theorem 4 guarantees there is no affine plane of order 6. However, it does not apply to order 10, for which was verified by computer search that no affine plane of this order exists. Whether there exists an affine plane of order 12 is an open problem. Here is a naive algorithm to determine whether an arbitrary plane $(S,\\mathscr L)$ is an affine plane: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Theorem 4 (Bruck-Ryser).** If $n$ is of the form $4k+1$ or $4k+2$ and $n$ is not the sum of two squares then there does not exist an affine plane of order $n$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
